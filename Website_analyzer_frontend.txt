import React, { useState } from 'react';
import { Search, Globe, Clock, TrendingUp, Shield, Zap, AlertCircle, CheckCircle, XCircle, Loader2 } from 'lucide-react';

const WebsiteAnalyzer = () => {
  const [url, setUrl] = useState('');
  const [loading, setLoading] = useState(false);
  const [analysis, setAnalysis] = useState(null);
  const [error, setError] = useState('');
  const [history, setHistory] = useState([]);

  const validateUrl = (url) => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };

  const analyzeWebsite = async () => {
    if (!url.trim()) {
      setError('Please enter a URL');
      return;
    }

    if (!validateUrl(url)) {
      setError('Please enter a valid URL (e.g., https://example.com)');
      return;
    }

    setLoading(true);
    setError('');
    setAnalysis(null);

    try {
      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Analysis failed');
      }

      setAnalysis(data);
      setHistory(prev => [{ url, timestamp: new Date(), id: Date.now() }, ...prev.slice(0, 9)]);
    } catch (err) {
      setError(err.message || 'Failed to analyze website');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    analyzeWebsite();
  };

  const analyzeFromHistory = (historyUrl) => {
    setUrl(historyUrl);
    setError('');
  };

  const getScoreColor = (score) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreIcon = (score) => {
    if (score >= 80) return <CheckCircle className="w-5 h-5 text-green-600" />;
    if (score >= 60) return <AlertCircle className="w-5 h-5 text-yellow-600" />;
    return <XCircle className="w-5 h-5 text-red-600" />;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center mb-4">
            <Globe className="w-12 h-12 text-indigo-600 mr-3" />
            <h1 className="text-4xl font-bold text-gray-900">Website Analyzer</h1>
          </div>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Analyze any website's performance, SEO, security, and more. Get detailed insights to improve your web presence.
          </p>
        </div>

        {/* Main Analysis Form */}
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
            <div className="space-y-6">
              <div>
                <label htmlFor="url" className="block text-sm font-medium text-gray-700 mb-2">
                  Website URL
                </label>
                <div className="flex gap-3">
                  <div className="flex-1 relative">
                    <Globe className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                    <input
                      type="text"
                      id="url"
                      value={url}
                      onChange={(e) => setUrl(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleSubmit(e)}
                      placeholder="https://example.com"
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 outline-none transition-colors"
                      disabled={loading}
                    />
                  </div>
                  <button
                    onClick={handleSubmit}
                    disabled={loading}
                    className="px-8 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center gap-2"
                  >
                    {loading ? (
                      <Loader2 className="w-5 h-5 animate-spin" />
                    ) : (
                      <Search className="w-5 h-5" />
                    )}
                    {loading ? 'Analyzing...' : 'Analyze'}
                  </button>
                </div>
              </div>

              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                  <div className="flex items-center">
                    <XCircle className="w-5 h-5 text-red-500 mr-2" />
                    <p className="text-red-700">{error}</p>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Analysis Results */}
          {loading && (
            <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
              <div className="flex items-center justify-center py-12">
                <div className="text-center">
                  <Loader2 className="w-12 h-12 text-indigo-600 animate-spin mx-auto mb-4" />
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Analyzing Website</h3>
                  <p className="text-gray-600">This may take a few moments...</p>
                </div>
              </div>
            </div>
          )}

          {analysis && (
            <div className="space-y-6">
              {/* Overview Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-white rounded-xl shadow-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <TrendingUp className="w-8 h-8 text-blue-600" />
                    {getScoreIcon(analysis.performance?.score || 0)}
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-1">Performance</h3>
                  <p className={`text-2xl font-bold ${getScoreColor(analysis.performance?.score || 0)}`}>
                    {analysis.performance?.score || 0}%
                  </p>
                </div>

                <div className="bg-white rounded-xl shadow-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <Search className="w-8 h-8 text-green-600" />
                    {getScoreIcon(analysis.seo?.score || 0)}
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-1">SEO</h3>
                  <p className={`text-2xl font-bold ${getScoreColor(analysis.seo?.score || 0)}`}>
                    {analysis.seo?.score || 0}%
                  </p>
                </div>

                <div className="bg-white rounded-xl shadow-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <Shield className="w-8 h-8 text-purple-600" />
                    {getScoreIcon(analysis.security?.score || 0)}
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-1">Security</h3>
                  <p className={`text-2xl font-bold ${getScoreColor(analysis.security?.score || 0)}`}>
                    {analysis.security?.score || 0}%
                  </p>
                </div>

                <div className="bg-white rounded-xl shadow-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <Zap className="w-8 h-8 text-orange-600" />
                    {getScoreIcon(analysis.accessibility?.score || 0)}
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-1">Accessibility</h3>
                  <p className={`text-2xl font-bold ${getScoreColor(analysis.accessibility?.score || 0)}`}>
                    {analysis.accessibility?.score || 0}%
                  </p>
                </div>
              </div>

              {/* Detailed Results */}
              <div className="bg-white rounded-xl shadow-lg p-8">
                <h2 className="text-2xl font-bold text-gray-900 mb-6">Detailed Analysis</h2>
                
                <div className="space-y-8">
                  {/* Performance Section */}
                  <div>
                    <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                      <TrendingUp className="w-6 h-6 text-blue-600 mr-2" />
                      Performance Metrics
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="bg-gray-50 rounded-lg p-4">
                        <p className="text-sm text-gray-600">Load Time</p>
                        <p className="text-lg font-semibold text-gray-900">{analysis.performance?.loadTime || 'N/A'}</p>
                      </div>
                      <div className="bg-gray-50 rounded-lg p-4">
                        <p className="text-sm text-gray-600">Page Size</p>
                        <p className="text-lg font-semibold text-gray-900">{analysis.performance?.pageSize || 'N/A'}</p>
                      </div>
                      <div className="bg-gray-50 rounded-lg p-4">
                        <p className="text-sm text-gray-600">Requests</p>
                        <p className="text-lg font-semibold text-gray-900">{analysis.performance?.requests || 'N/A'}</p>
                      </div>
                    </div>
                  </div>

                  {/* SEO Section */}
                  <div>
                    <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                      <Search className="w-6 h-6 text-green-600 mr-2" />
                      SEO Analysis
                    </h3>
                    <div className="space-y-3">
                      <div className="flex justify-between items-center py-2 border-b border-gray-200">
                        <span className="text-gray-700">Title Tag</span>
                        <span className={analysis.seo?.titleTag ? 'text-green-600' : 'text-red-600'}>
                          {analysis.seo?.titleTag ? 'Present' : 'Missing'}
                        </span>
                      </div>
                      <div className="flex justify-between items-center py-2 border-b border-gray-200">
                        <span className="text-gray-700">Meta Description</span>
                        <span className={analysis.seo?.metaDescription ? 'text-green-600' : 'text-red-600'}>
                          {analysis.seo?.metaDescription ? 'Present' : 'Missing'}
                        </span>
                      </div>
                      <div className="flex justify-between items-center py-2 border-b border-gray-200">
                        <span className="text-gray-700">Headings Structure</span>
                        <span className={analysis.seo?.headings ? 'text-green-600' : 'text-red-600'}>
                          {analysis.seo?.headings ? 'Good' : 'Needs Improvement'}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Issues & Recommendations */}
                  {(analysis.issues || analysis.recommendations) && (
                    <div>
                      <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                        <AlertCircle className="w-6 h-6 text-orange-600 mr-2" />
                        Issues & Recommendations
                      </h3>
                      <div className="space-y-3">
                        {analysis.issues?.map((issue, index) => (
                          <div key={index} className="flex items-start p-3 bg-red-50 rounded-lg">
                            <XCircle className="w-5 h-5 text-red-500 mr-2 mt-0.5 flex-shrink-0" />
                            <span className="text-red-700">{issue}</span>
                          </div>
                        ))}
                        {analysis.recommendations?.map((rec, index) => (
                          <div key={index} className="flex items-start p-3 bg-blue-50 rounded-lg">
                            <CheckCircle className="w-5 h-5 text-blue-500 mr-2 mt-0.5 flex-shrink-0" />
                            <span className="text-blue-700">{rec}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Analysis History */}
          {history.length > 0 && (
            <div className="bg-white rounded-xl shadow-lg p-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                <Clock className="w-6 h-6 text-gray-600 mr-2" />
                Recent Analysis
              </h2>
              <div className="space-y-3">
                {history.map((item) => (
                  <div key={item.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                    <div className="flex items-center">
                      <Globe className="w-4 h-4 text-gray-400 mr-2" />
                      <span className="text-gray-900 truncate max-w-md">{item.url}</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <span className="text-sm text-gray-500">
                        {item.timestamp.toLocaleTimeString()}
                      </span>
                      <button
                        onClick={() => analyzeFromHistory(item.url)}
                        className="text-indigo-600 hover:text-indigo-800 text-sm font-medium"
                      >
                        Re-analyze
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default WebsiteAnalyzer;